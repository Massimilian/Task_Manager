/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.maslov.testSwing;

import org.maslov.ready_project.Task;
import org.maslov.ready_project.TaskSwingWorker;

import javax.swing.*;
import java.time.LocalDateTime;

/**
 * @author vasal
 */
public class FirstFrame extends javax.swing.JFrame {

    /**
     * Creates new form FirstFrame
     */
    public FirstFrame() {
        this.setTitle("Task manager");
        initComponents();
        this.setVisibility(false);
        this.setNulls();
    }

    private void setVisibility(boolean b) {
        OKBTN.setVisible(b);
        CloseBTN.setVisible(b);
        ForUserText.setVisible(b);
        InfoForEnter.setVisible(b);
    }

    private void setNulls() {
        this.taskId = -1;
        this.taskName = null;
        this.taskMonths = -1;
        this.taskDays = -1;
        this.taskHours = -1;
        this.taskMinutes = -1;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        ButtonsPanel = new javax.swing.JPanel();
        CreateBTN = new javax.swing.JButton();
        ReturnByNameBTN = new javax.swing.JButton();
        ReturnByIdBTN = new javax.swing.JButton();
        GetAllBTN = new javax.swing.JButton();
        UpdateBTN = new javax.swing.JButton();
        DeleteBTN = new javax.swing.JButton();
        SaveBTN = new javax.swing.JButton();
        ForUserText = new javax.swing.JTextField();
        InfoForEnter = new javax.swing.JLabel();
        OKBTN = new javax.swing.JButton();
        CloseBTN = new javax.swing.JButton();
        ViewPanel = new javax.swing.JPanel();
        InfoScrollPane = new javax.swing.JScrollPane();
        ForTextPlace = new javax.swing.JTextArea();
        ClearBTN = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ButtonsPanel.setBackground(new java.awt.Color(204, 255, 204));

        CreateBTN.setBackground(new java.awt.Color(255, 102, 102));
        CreateBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        CreateBTN.setText("Create  new  Task");
        CreateBTN.setToolTipText("Создание нового Задания");
        CreateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateBTNActionPerformed(evt);
            }
        });

        ReturnByNameBTN.setBackground(new java.awt.Color(255, 204, 153));
        ReturnByNameBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        ReturnByNameBTN.setText("Return  Task  by  name");
        ReturnByNameBTN.setToolTipText("Информация по Заданию по названию Задания");
        ReturnByNameBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnByNameBTNActionPerformed(evt);
            }
        });

        ReturnByIdBTN.setBackground(new java.awt.Color(255, 255, 102));
        ReturnByIdBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        ReturnByIdBTN.setText("Return  Task  by  ID");
        ReturnByIdBTN.setToolTipText("Информация по Заданию по ID Задания");
        ReturnByIdBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnByIdBTNActionPerformed(evt);
            }
        });

        GetAllBTN.setBackground(new java.awt.Color(102, 255, 102));
        GetAllBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        GetAllBTN.setText("Get  all  Tasks");
        GetAllBTN.setToolTipText("Получить список Заданий");
        GetAllBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetAllBTNActionPerformed(evt);
            }
        });

        UpdateBTN.setBackground(new java.awt.Color(51, 255, 255));
        UpdateBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        UpdateBTN.setText("Update  Task");
        UpdateBTN.setToolTipText("Обновить информацию по Заданию.");
        UpdateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBTNActionPerformed(evt);
            }
        });

        DeleteBTN.setBackground(new java.awt.Color(153, 153, 255));
        DeleteBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        DeleteBTN.setText("Delete  Task");
        DeleteBTN.setToolTipText("Удалить Задание");
        DeleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBTNActionPerformed(evt);
            }
        });

        SaveBTN.setBackground(new java.awt.Color(255, 102, 255));
        SaveBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        SaveBTN.setText("Save");
        SaveBTN.setToolTipText("Выход");
        SaveBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBTNActionPerformed(evt);
            }
        });

        ForUserText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForUserTextActionPerformed(evt);
            }
        });

        InfoForEnter.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        InfoForEnter.setText("LabeInfo");

        OKBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        OKBTN.setText("OK");
        OKBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKBTNActionPerformed(evt);
            }
        });

        CloseBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        CloseBTN.setText("close");
        CloseBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonsPanelLayout = new javax.swing.GroupLayout(ButtonsPanel);
        ButtonsPanel.setLayout(ButtonsPanelLayout);
        ButtonsPanelLayout.setHorizontalGroup(
            ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonsPanelLayout.createSequentialGroup()
                .addGroup(ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ForUserText, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ButtonsPanelLayout.createSequentialGroup()
                        .addComponent(OKBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CloseBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InfoForEnter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ButtonsPanelLayout.createSequentialGroup()
                        .addGroup(ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(CreateBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ReturnByNameBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ReturnByIdBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GetAllBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UpdateBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DeleteBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SaveBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        ButtonsPanelLayout.setVerticalGroup(
            ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CreateBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ReturnByNameBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ReturnByIdBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GetAllBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UpdateBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InfoForEnter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ForUserText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CloseBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(OKBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ViewPanel.setBackground(new java.awt.Color(204, 255, 204));

        ForTextPlace.setEditable(false);
        ForTextPlace.setColumns(20);
        ForTextPlace.setRows(5);
        ForTextPlace.setToolTipText("Здесь появляется вся информация по Заданиям");
        ForTextPlace.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204), 3));
        ForTextPlace.setDisabledTextColor(new java.awt.Color(0, 153, 0));
        InfoScrollPane.setViewportView(ForTextPlace);

        ClearBTN.setBackground(new java.awt.Color(204, 204, 204));
        ClearBTN.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        ClearBTN.setText("Clear");
        ClearBTN.setToolTipText("Очистить поле");
        ClearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewPanelLayout = new javax.swing.GroupLayout(ViewPanel);
        ViewPanel.setLayout(ViewPanelLayout);
        ViewPanelLayout.setHorizontalGroup(
            ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InfoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClearBTN)
                .addContainerGap())
        );
        ViewPanelLayout.setVerticalGroup(
            ViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewPanelLayout.createSequentialGroup()
                .addComponent(InfoScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClearBTN)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateBTNActionPerformed
        this.setVisibility(true);
        InfoForEnter.setText("Enter new Task's name");

    }//GEN-LAST:event_CreateBTNActionPerformed

    private void ClearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBTNActionPerformed
        if (!ForTextPlace.getText().trim().isEmpty()) {
            ForTextPlace.setText("");
        }
        this.setVisibility(false);
    }//GEN-LAST:event_ClearBTNActionPerformed

    private void GetAllBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetAllBTNActionPerformed
        ForTextPlace.setText(tsw.getAllTasks());
        this.setVisibility(false);
    }//GEN-LAST:event_GetAllBTNActionPerformed

    private void DeleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBTNActionPerformed
        this.setVisibility(true);
        InfoForEnter.setText("Enter task's ID or name for delete");

    }//GEN-LAST:event_DeleteBTNActionPerformed

    private void CloseBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseBTNActionPerformed
        this.ForUserText.setText("");
        this.setVisibility(false);
        this.setNulls();
    }//GEN-LAST:event_CloseBTNActionPerformed

    private void ForUserTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForUserTextActionPerformed
    }//GEN-LAST:event_ForUserTextActionPerformed

    private void OKBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKBTNActionPerformed
        if (this.InfoForEnter.getText().equals("Done") || this.InfoForEnter.getText().equals("Cannot do this")) {
            this.setVisibility(false);
            ForUserText.setText("");
        } else if (this.InfoForEnter.getText().contains("Enter task's ID or name for delete")) {
            String ask = ForUserText.getText();
            if (!ask.isEmpty()) {
                boolean result = tsw.deleteTask(ask);
                if (result) {
                    InfoForEnter.setText("Done");
                } else {
                    InfoForEnter.setText("Cannot do this");
                }
                ForUserText.setVisible(false);
                CloseBTN.setVisible(false);
                ForUserText.setText("");
            }
        } else if (this.InfoForEnter.getText().contains("Enter task's ID number")) {
            String ask = ForUserText.getText();
            if (!ask.isEmpty()) {
                String result = tsw.returnTaskByIdInString(ask);
                this.setDoneAndFalse(result);
            }
            ForUserText.setText("");
        } else if (this.InfoForEnter.getText().contains("Enter your Task name, please")) {
            String ask = ForUserText.getText();
            if (!ask.isEmpty()) {
                String result = tsw.returnTaskByName(ask);
                this.setDoneAndFalse(result);
            }
            ForUserText.setText("");
        } else if (this.InfoForEnter.getText().contains("Enter new Task's name")) {
            String ask = ForUserText.getText();
            ForUserText.setText("");
            if (ask.isEmpty()) {
                InfoForEnter.setText("Empty field. Enter new Task's name");
            } else {
                if (tsw.findLetters(ask)) {
                    if (tsw.returnTaskByName(ask).isEmpty()) {
                        this.taskName = ask;
                        InfoForEnter.setText("Enter the number of months to finish (<12)");
                        ForUserText.setText("");
                    } else {
                        InfoForEnter.setText("Name is busy! Enter new Task's name");
                        ForUserText.setText("");
                    }
                } else {
                    InfoForEnter.setText("Impossible name! Enter new Task's name");
                    ForUserText.setText("");
                }
            }
        } else if (this.InfoForEnter.getText().contains("Enter the number of months to finish (<12)")) {
            this.taskMonths = this.prepareTime(12);
            if (this.taskMonths != -1) {
                InfoForEnter.setText("Enter the number of days to finish (<31)");
            }
            ForUserText.setText("");
        } else if (this.InfoForEnter.getText().contains("Enter the number of days to finish (<31)")) {
            this.taskDays = this.prepareTime(31);
            if (this.taskDays != -1) {
                InfoForEnter.setText("Enter the number of hours to finish (<24)");
            }
            ForUserText.setText("");
        } else if (this.InfoForEnter.getText().contains("Enter the number of hours to finish (<24)")) {
            this.taskHours = this.prepareTime(24);
            if (this.taskHours != -1) {
                InfoForEnter.setText("Enter the number of minutes to finish (<60)");
            }
            ForUserText.setText("");
        } else if (this.InfoForEnter.getText().contains("Enter the number of minutes to finish (<60)")) {
            this.taskMinutes = this.prepareTime(60);
            if (this.taskMinutes != -1) {
                InfoForEnter.setText("Done");
                ForUserText.setVisible(false);
                CloseBTN.setVisible(false);
                this.createTask();
                this.setNulls();
                ForUserText.setText("");
            }
        } else if (this.InfoForEnter.getText().contains("Enter Task's id for change")) {
            String ask = ForUserText.getText();
            if (!ask.isEmpty()) {
                Task task = tsw.returnTaskById(ask);
                if (task == null) {
                    InfoForEnter.setText("Cannot do this");
                    ForUserText.setVisible(false);
                } else {
                    this.taskId = task.getId();
                    InfoForEnter.setText("Enter new Task's name");
                    ForUserText.setText("");
                }
            }
        }
    }//GEN-LAST:event_OKBTNActionPerformed

    private void setDoneAndFalse(String result) {
        if (result.isEmpty()) {
            InfoForEnter.setText("Cannot do this");
            ForUserText.setText("");
            ForUserText.setVisible(false);
        } else {
            InfoForEnter.setText("Done");
            ForUserText.setVisible(false);
            CloseBTN.setVisible(false);
            ForTextPlace.setText(result);
        }

    }
    private void createTask() {
        if (this.taskName != null && !this.taskName.trim().isEmpty() && this.taskMonths != -1 && this.taskDays != -1 &&
                this.taskHours != -1 && this.taskMinutes != -1) {
            LocalDateTime current = LocalDateTime.now();
            LocalDateTime finish = current.plusMonths(this.taskMonths).plusDays(this.taskDays).
                    minusHours(this.taskHours).plusMinutes(this.taskMinutes);
            if (this.taskId == -1) {
                this.taskId = tsw.findMaxId() + 1;
            } else {
                tsw.deleteTask(String.valueOf(taskId));
            }
            Task temp = new Task(this.taskId, this.taskName, current, finish);
            tsw.addTask(temp);
        }
    }

    private int prepareTime(int num) {
        int number = -1;
        String timePeriod = this.findPeriod(num);
        String ask = this.ForUserText.getText();
        this.ForUserText.setText("");
        if (ask.isEmpty()) {
            InfoForEnter.setText(String.format("Empty field. Enter the number of %s to finish (<%d)", timePeriod, num));
        } else {
            if (tsw.isNumber(ask)) {
                number = Integer.parseInt(ask);
                if (number < 0 || number >= num) {
                    InfoForEnter.setText(String.format("Wrong number. Enter the number of %s to finish (<%d)", timePeriod, num));
                    number = -1;
                }
            } else {
                InfoForEnter.setText(String.format("Incorrect. Enter the number of %s to finish (<%d)", timePeriod, num));
            }
        }
        return number;
    }

    private String findPeriod(int num) {
        return switch (num) {
            case 12 -> "months";
            case 31 -> "days";
            case 24 -> "hours";
            case 60 -> "minutes";
            default -> "";
        };
    }


    private void ReturnByIdBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnByIdBTNActionPerformed
        this.setVisibility(true);
        InfoForEnter.setText("Enter task's ID number");
    }//GEN-LAST:event_ReturnByIdBTNActionPerformed

    private void SaveBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBTNActionPerformed
        tsw.save();
        this.setVisibility(true);
        this.ForUserText.setVisible(false);
        this.InfoForEnter.setText("Done");
        this.CloseBTN.setVisible(false);
    }//GEN-LAST:event_SaveBTNActionPerformed

    private void ReturnByNameBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnByNameBTNActionPerformed
        this.setVisibility(true);
        InfoForEnter.setText("Enter your Task name, please");
    }//GEN-LAST:event_ReturnByNameBTNActionPerformed

    private void UpdateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBTNActionPerformed
        this.setVisibility(true);
        InfoForEnter.setText("Enter Task's id for change");
    }//GEN-LAST:event_UpdateBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FirstFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FirstFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonsPanel;
    private javax.swing.JButton ClearBTN;
    private javax.swing.JButton CloseBTN;
    private javax.swing.JButton CreateBTN;
    private javax.swing.JButton DeleteBTN;
    private javax.swing.JTextArea ForTextPlace;
    private javax.swing.JTextField ForUserText;
    private javax.swing.JButton GetAllBTN;
    private javax.swing.JLabel InfoForEnter;
    private javax.swing.JScrollPane InfoScrollPane;
    private javax.swing.JButton OKBTN;
    private javax.swing.JButton ReturnByIdBTN;
    private javax.swing.JButton ReturnByNameBTN;
    private javax.swing.JButton SaveBTN;
    private javax.swing.JButton UpdateBTN;
    private javax.swing.JPanel ViewPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private TaskSwingWorker tsw = new TaskSwingWorker();
    private long taskId;
    private String taskName;
    private int taskMonths;
    private int taskDays;
    private int taskHours;
    private int taskMinutes;
}
